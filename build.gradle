apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
//sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'hextex.Main'
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: '4.10'

    compile 'com.sparkjava:spark-core:2.3'
    testCompile group: 'junit', name: 'junit', version: '4.+'

}



mainClassName = 'hextex.Main'

jar {
	manifest {
		attributes 'Main-Class': 'Main'
	}
}

run {
    standardInput = System.in
}


//DATABASE STUFF
import groovy.sql.Sql

configurations {
    sqllite
}

repositories {
    mavenCentral()
}

dependencies {
    sqllite 'org.xerial:sqlite-jdbc:3.8.9.1'
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.sqllite.each { File file ->
    loader.addURL(file.toURL())
}

Sql sql = Sql.newInstance('jdbc:sqlite:test.db', "org.sqlite.JDBC")

task checkSql << {
    sql.execute 'DROP TABLE BOOK'
    sql.execute 'CREATE TABLE BOOK(name CHAR(50), pages INTEGER)'
    sql.execute 'INSERT INTO BOOK VALUES ("Kirja", "200")'
    sql.eachRow('SELECT * FROM sqlite_master') { row ->
        logger.lifecycle row.toString()
    }
}
